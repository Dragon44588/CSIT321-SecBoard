'use strict';import{AssertionError,AttributeError,BaseException,DeprecationWarning,Exception,IndexError,IterableError,KeyError,NotImplementedError,RuntimeWarning,StopIteration,UserWarning,ValueError,Warning,__JsIterator__,__PyIterator__,__Terminal__,__add__,__and__,__call__,__class__,__envir__,__eq__,__floordiv__,__ge__,__get__,__getcm__,__getitem__,__getslice__,__getsm__,__gt__,__i__,__iadd__,__iand__,__idiv__,__ijsmod__,__ilshift__,__imatmul__,__imod__,__imul__,__in__,__init__,__ior__,__ipow__,
__irshift__,__isub__,__ixor__,__jsUsePyNext__,__jsmod__,__k__,__kwargtrans__,__le__,__lshift__,__lt__,__matmul__,__mergefields__,__mergekwargtrans__,__mod__,__mul__,__ne__,__neg__,__nest__,__or__,__pow__,__pragma__,__pyUseJsNext__,__rshift__,__setitem__,__setproperty__,__setslice__,__sort__,__specialattrib__,__sub__,__super__,__t__,__terminal__,__truediv__,__withblock__,__xor__,abs,all,any,assert,bool,bytearray,bytes,callable,chr,copy,deepcopy,delattr,dict,dir,divmod,enumerate,filter,float,getattr,
hasattr,input,int,isinstance,issubclass,len,list,map,max,min,object,ord,pow,print,property,py_TypeError,py_iter,py_metatype,py_next,py_reversed,py_typeof,range,repr,round,set,setattr,sorted,str,sum,tuple,zip}from"./org.transcrypt.__runtime__.js";var __name__="__main__";export var difficulty="00";export var standardBlock=__class__("standardBlock",[object],{__module__:__name__,get __init__(){return __get__(this,function(self,previousHash,data,proofOfWork,correctionHash){self.previousHash=previousHash;
self.data=data;self.proofOfWork=proofOfWork;self.correctionHash=correctionHash})}});export var correctionBlock=__class__("correctionBlock",[object],{__module__:__name__,get __init__(){return __get__(this,function(self,previousHash,data,proofOfWork,electionHash,successorHash,standardHeadHash){self.previousHash=previousHash;self.data=data;self.proofOfWork=proofOfWork;self.electionHash=electionHash;self.successorHash=successorHash;self.standardHeadHash=standardHeadHash})}});export var election=__class__("election",
[object],{__module__:__name__,get __init__(){return __get__(this,function(self,previousHash,data,newData,proofOfWork,correctionHash){self.previousHash=previousHash;self.data=data;self.newData=newData;self.proofOfWork=proofOfWork;self.correctionHash=correctionHash})}});export var standardChain=__class__("standardChain",[object],{__module__:__name__,get __init__(){return __get__(this,function(self){var hash1=self.ProofOfWorkGenesis("Genesis","Test","Correction");print("Hash of Genesis: "+str(hash1[0]));
print();var genesis=standardBlock("Genesis","Test",hash1[1],"None");self.chainList=[];self.chainList.append(genesis);self.correctionList=[];self.electionList=[]})},get __str__(){return __get__(this,function(self){var output="";var count=0;for(var x of self.chainList){count++;output+="BLOCK {:}\nPrevious Hash:   {:}\nData:            {:}\nProof of Work:   {:}\nCorrection Hash: {:}\n\n".format(count,x.previousHash,x.data,x.proofOfWork,x.correctionHash)}return output})},get printCorrectionList(){return __get__(this,
function(self){var output="";var count=0;for(var x of self.correctionList){count++;output+="\nCORRECTION BLOCK {:}\nPrevious Hash:   {:}\nData:            {:}\nProof of Work:   {:}\nElection Hash:   {:}\nSuccessor Hash:  {:}\nHead Hash:       {:}\n".format(count,x.previousHash,x.data,x.proofOfWork,x.electionHash,x.successorHash,x.standardHeadHash)}print(output)})},get printTrueList(){return __get__(this,function(self){var output="";var count=0;var corrections=0;for(var x of self.chainList){count++;
if(x==""){output+="CORRECTION BLOCK {:}\nPrevious Hash:   {:}\nData:            {:}\nProof of Work:   {:}\nElection Hash:   {:}\nSuccessor Hash:  {:}\nHead Hash:       {:}\n\n".format(count,self.correctionList[corrections].previousHash,self.correctionList[corrections].data,self.correctionList[corrections].proofOfWork,self.correctionList[corrections].electionHash,self.correctionList[corrections].successorHash,self.correctionList[corrections].standardHeadHash);corrections++}else output+="BLOCK {:}\nPrevious Hash:   {:}\nData:            {:}\nProof of Work:   {:}\nCorrection Hash: {:}\n\n".format(count,
x.previousHash,x.data,x.proofOfWork,x.correctionHash)}print(output)})},get ProofOfWorkGenesis(){return __get__(this,function(self,previousHash,data,correctionHash){var nonceValue=-1;var hash1="";while(!str(hash1).startswith(difficulty)){var nonceValue=nonceValue+1;var newBlock=json.dumps(dict({"Previous Hash":previousHash,"Data":hashlib.sha256(data.encode("utf-8")).hexdigest(),"Proof of Work":nonceValue,"Correction Hash":correctionHash}),__kwargtrans__({sort_keys:true,indent:4,separators:tuple([",",
": "])}));var hash1=hashlib.sha256(newBlock.encode("utf-8")).hexdigest();if(nonceValue>=1E9)break}return tuple([hash1,nonceValue])})},get ProofOfWork(){return __get__(this,function(self,previousHash,data,correctionHash){var nonceValue=-1;var hash1="";while(!str(hash1).startswith(difficulty)){var nonceValue=nonceValue+1;var newBlock=json.dumps(dict({"Previous Hash":previousHash,"Data":hashlib.sha256(data.encode("utf-8")).hexdigest(),"Proof of Work":nonceValue,"Correction Hash":correctionHash}),__kwargtrans__({sort_keys:true,
indent:4,separators:tuple([",",": "])}));var hash1=hashlib.sha256(newBlock.encode("utf-8")).hexdigest();if(nonceValue>=1E9)break}return nonceValue})},get ProofOfWorkCorrection(){return __get__(this,function(self,previousHash,data,electionHash,successorHash,headHash){var nonceValue=-1;var hash1="";while(!str(hash1).startswith(difficulty)){var nonceValue=nonceValue+1;var newBlock=json.dumps(dict({"Previous Hash":previousHash,"Data":hashlib.sha256(data.encode("utf-8")).hexdigest(),"Proof of Work":nonceValue,
"Election Hash":electionHash,"Successor Hash":successorHash,"Standard Head Hash":headHash}),__kwargtrans__({sort_keys:true,indent:4,separators:tuple([",",": "])}));var hash1=hashlib.sha256(newBlock.encode("utf-8")).hexdigest();if(nonceValue>=1E9)break}return tuple([hash1,nonceValue])})},get createStandardBlock(){return __get__(this,function(self,data){var previousBlockIndex=len(self.chainList)-1;if(self.chainList[previousBlockIndex]==""){var hashOfPrevious="CORRECTED";var previousBlockIndex=len(self.correctionList)-
1;var correctionBlock=json.dumps(dict({"Previous Hash":self.correctionList[previousBlockIndex].previousHash,"Data":hashlib.sha256(self.correctionList[previousBlockIndex].data.encode("utf-8")).hexdigest(),"Proof of Work":self.correctionList[previousBlockIndex].proofOfWork,"Election Hash":self.correctionList[previousBlockIndex].electionHash,"Successor Hash":self.correctionList[previousBlockIndex].successorHash,"Standard Head Hash":self.correctionList[previousBlockIndex].standardHeadHash}),__kwargtrans__({sort_keys:true,
indent:4,separators:tuple([",",": "])}));var correctionHash=hashlib.sha256(correctionBlock.encode("utf-8")).hexdigest();var newNonce=self.ProofOfWork(hashOfPrevious,data,correctionHash);var newBlock=standardBlock(hashOfPrevious,data,newNonce,correctionHash)}else{var newBlock=json.dumps(dict({"Previous Hash":self.chainList[previousBlockIndex].previousHash,"Data":hashlib.sha256(self.chainList[previousBlockIndex].data.encode("utf-8")).hexdigest(),"Proof of Work":self.chainList[previousBlockIndex].proofOfWork,
"Correction Hash":self.chainList[previousBlockIndex].correctionHash}),__kwargtrans__({sort_keys:true,indent:4,separators:tuple([",",": "])}));var hashOfPrevious=hashlib.sha256(newBlock.encode("utf-8")).hexdigest();var newNonce=self.ProofOfWork(hashOfPrevious,data,self.chainList[previousBlockIndex].correctionHash);var newBlock=standardBlock(hashOfPrevious,data,newNonce,self.chainList[previousBlockIndex].correctionHash)}self.chainList.append(newBlock);return})},get createCorrectionBlock(){return __get__(this,
function(self,data,electionHash,block_replace_number){if(!self.correctionList){var newBlock=json.dumps(dict({"Previous Hash":self.chainList[0].previousHash,"Data":hashlib.sha256(self.chainList[0].data.encode("utf-8")).hexdigest(),"Proof of Work":self.chainList[0].proofOfWork,"Correction Hash":self.chainList[0].correctionHash}),__kwargtrans__({sort_keys:true,indent:4,separators:tuple([",",": "])}));var hashOfPrevious=hashlib.sha256(newBlock.encode("utf-8")).hexdigest();try{var successorBlock=json.dumps(dict({"Previous Hash":self.chainList[block_replace_number].previousHash,
"Data":hashlib.sha256(self.chainList[block_replace_number].data.encode("utf-8")).hexdigest(),"Proof of Work":self.chainList[block_replace_number].proofOfWork,"Correction Hash":self.chainList[block_replace_number].correctionHash}),__kwargtrans__({sort_keys:true,indent:4,separators:tuple([",",": "])}));var newSuccessorHash=hashlib.sha256(successorBlock.encode("utf-8")).hexdigest()}catch(__except0__){if(isinstance(__except0__,IndexError))var newSuccessorHash="None";else throw __except0__;}var headBlock=
json.dumps(dict({"Previous Hash":self.chainList[-1].previousHash,"Data":hashlib.sha256(self.chainList[-1].data.encode("utf-8")).hexdigest(),"Proof of Work":self.chainList[-1].proofOfWork,"Correction Hash":self.chainList[-1].correctionHash}),__kwargtrans__({sort_keys:true,indent:4,separators:tuple([",",": "])}));var headHash=hashlib.sha256(headBlock.encode("utf-8")).hexdigest();var newNonce=self.ProofOfWorkCorrection(hashOfPrevious,data,"Election Hash TBI",newSuccessorHash,headHash);var newBlock=correctionBlock(hashOfPrevious,
data,newNonce,"Election Hash TBI",newSuccessorHash,headHash);self.correctionList.append(newBlock);self.chainList[block_replace_number-1]="";return}var previousBlockIndex=len(self.correctionList)-1;var newBlock=json.dumps(dict({"Previous Hash":self.correctionList[previousBlockIndex].previousHash,"Data":hashlib.sha256(self.correctionList[previousBlockIndex].data.encode("utf-8")).hexdigest(),"Proof of Work":self.correctionList[previousBlockIndex].proofOfWork,"Election Hash":self.correctionList[previousBlockIndex].electionHash,
"Successor Hash":self.correctionList[previousBlockIndex].successorHash,"Standard Head Hash":self.correctionList[previousBlockIndex].standardHeadHash}),__kwargtrans__({sort_keys:true,indent:4,separators:tuple([",",": "])}));var hashOfPrevious=hashlib.sha256(newBlock.encode("utf-8")).hexdigest();try{var successorBlock=json.dumps(dict({"Previous Hash":self.chainList[block_replace_number].previousHash,"Data":hashlib.sha256(self.chainList[block_replace_number].data.encode("utf-8")).hexdigest(),"Proof of Work":self.chainList[block_replace_number].proofOfWork,
"Correction Hash":self.chainList[block_replace_number].correctionHash}),__kwargtrans__({sort_keys:true,indent:4,separators:tuple([",",": "])}));var newSuccessorHash=hashlib.sha256(successorBlock.encode("utf-8")).hexdigest()}catch(__except0__){if(isinstance(__except0__,IndexError))var newSuccessorHash="None";else throw __except0__;}var headBlock=json.dumps(dict({"Previous Hash":self.chainList[-1].previousHash,"Data":hashlib.sha256(self.chainList[-1].data.encode("utf-8")).hexdigest(),"Proof of Work":self.chainList[-1].proofOfWork,
"Correction Hash":self.chainList[-1].correctionHash}),__kwargtrans__({sort_keys:true,indent:4,separators:tuple([",",": "])}));var headHash=hashlib.sha256(headBlock.encode("utf-8")).hexdigest();var newNonce=self.ProofOfWorkCorrection(hashOfPrevious,data,"Election Hash TBI",newSuccessorHash,headHash);var newBlock=correctionBlock(hashOfPrevious,data,newNonce,"Election Hash TBI",newSuccessorHash,headHash);self.correctionList.append(newBlock);self.chainList[block_replace_number-1]=""})},get validateChain(){return __get__(this,
function(self){if(self.chainList[0].previousHash=="Genesis")print("Genesis found, which is block 1");else{print("Error validating block: Genesis block not found");return 0}var count=-1;var corrections=0;for(var x of self.chainList){count++;if(count==0)continue;if(self.chainList[count]==""){corrections++;continue}if(self.chainList[count-1]==""){var previous_hash_stored_in_current_block=x.correctionHash;print(previous_hash_stored_in_current_block);var newBlock=json.dumps(dict({"Previous Hash":self.correctionList[corrections-
1].previousHash,"Data":hashlib.sha256(self.correctionList[corrections-1].data.encode("utf-8")).hexdigest(),"Proof of Work":self.correctionList[corrections-1].proofOfWork,"Election Hash":self.correctionList[corrections-1].electionHash,"Successor Hash":self.correctionList[corrections-1].successorHash,"Standard Head Hash":self.correctionList[corrections-1].standardHeadHash}),__kwargtrans__({sort_keys:true,indent:4,separators:tuple([",",": "])}));var rehash_previous_block=hashlib.sha256(newBlock.encode("utf-8")).hexdigest();
if(previous_hash_stored_in_current_block!=rehash_previous_block){var previous_hash_stored_in_current_block=self.correctionList[corrections-1].successorHash;print(previous_hash_stored_in_current_block);var newBlock=json.dumps(dict({"Previous Hash":self.chainList[count].previousHash,"Data":hashlib.sha256(self.chainList[count].data.encode("utf-8")).hexdigest(),"Proof of Work":self.chainList[count].proofOfWork,"Correction Hash":self.chainList[count].correctionHash}),__kwargtrans__({sort_keys:true,indent:4,
separators:tuple([",",": "])}));var rehash_previous_block=hashlib.sha256(newBlock.encode("utf-8")).hexdigest();print(rehash_previous_block)}}else{var previous_hash_stored_in_current_block=x.previousHash;print(previous_hash_stored_in_current_block);var newBlock=json.dumps(dict({"Previous Hash":self.chainList[count-1].previousHash,"Data":hashlib.sha256(self.chainList[count-1].data.encode("utf-8")).hexdigest(),"Proof of Work":self.chainList[count-1].proofOfWork,"Correction Hash":self.chainList[count-
1].correctionHash}),__kwargtrans__({sort_keys:true,indent:4,separators:tuple([",",": "])}));var rehash_previous_block=hashlib.sha256(newBlock.encode("utf-8")).hexdigest();print(rehash_previous_block)}if(previous_hash_stored_in_current_block==rehash_previous_block)print("Successfully validated block "+str(count+1));else{print("Error validating block "+str(count+1));return 0}}if(corrections!=len(self.correctionList))return 0;else return 1})},get createElection(){return __get__(this,function(self,newData,
blockNumber){var previousHash=self.chainList[blockNumber-1].previousHash;var data=hashlib.sha256(self.chainList[blockNumber-1].data.encode("utf-8")).hexdigest();var proofOfWork=self.chainList[blockNumber-1].proofOfWork;var correctionHash=self.chainList[blockNumber-1].correctionHash;var newElection=election(previousHash,data,newData,proofOfWork,correctionHash);self.electionList.append(newElection);return newElection})},get processElection(){return __get__(this,function(self,electionToProcess){var check=
0;for(var i of self.electionList)if(electionToProcess==i){var check=1;print("Election found")}if(check==0){print("No elections found with that object.");return}})}});

//# sourceMappingURL=block.map